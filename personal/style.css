/* 
 * Begin CSS Reset
 */

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

/* 
 * End CSS reset
 */

/*
 * Base (definitions of what basic elements look like)
 */
body {
	font-family: 'Ubuntu', Helvetica, Sans-serif;
	font-weight: lighter;

	/* I'm working mobile-first. So the "basic" font size (meaning, screens up to 799px wide, phones and smaller)
	is set to 18px. */
	font-size: 16px;
	line-height: 

	/* Since only the*/
	color: #333;
	background-color: gray;
}

p {
	margin-top: 1em;
	margin-bottom: .4em;
	color: #414042;
}

h1 {
	font-size: 2.4em;
	font-weight: bold;
}

a:link, a:visited {
	text-decoration: none;
	color: inherit;
}

/* navigation menu */
nav {
	color: white;
	margin-top: 1.2em;
	font-weight: lighter;
	text-align: center;
	font-size: 1.4em;
}

/* Make sure you define the base size of "li" explicity, check above */
nav li {
	display: inline-block;
	margin-left: 1.5em;
	margin-right: 1.5em;
}

/* content part */
/* 
	nando: you should give THIS box a width rather than the H1. Then you can keep this constant throughout
	the site and not have to re-define or create a bunch of exceptions.

 */
.content {
	width: 90%;
	margin: 3em auto 0 auto;
	/* vh is a CSS3 measurement. Works in most modern browsers, not old ones. Means "viewport height". I'm using 70% of it. */
	height: 70vh;
}

/* landing-page */
/*  You created a class (.landing-page) for an element that appears only once (h1).
	Instead, let's use that class to define the body, and select things (like the h1) inside it. Example:
	
	HTML
	<body class="landing-page">
	...
		<div class="content">
			<h1>Your title here</h1>
		</div>
	...
	</body>

	CSS:
	.landing .content h1 {
		[make it white, center-aligned, etc]
	}

	.landing-page is now the section identifier. It specifies your section's backgrounds.
*/
.landing-page {
	background: url("superman.jpg") no-repeat center center fixed;
	-webkit-background-size: cover;
	-moz-background-size: cover;
	-o-background-size: cover;
	background-size: cover;
}

.landing-page h1 {
	/* On this page ONLY, make h1 different: */
	text-align: center;
	color: white;
	font-size: 4em;

	/* Let's make your title vertically-centered by making it float! This is a CSS3 trick. */
	position: relative;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

/* Avoid creating classes when there are elements which are semantic and do the trick. <em> is perfect here. */
.landing-page h1 em {
	font-style: normal;
	color: #FF67C0;
}

/* 
	That way I could, for example, make it yellow on the about page:
	.about h1 em {
	color: #FAB71D;
	}

	Be careful, however, with these over-specific selectors. Be modular and re-usable whenever possible.
*/

/* about, work and connect */
.about {
	/* repeated the background just in case you want different backgrounds in every section */
	background: url("superman.jpg") no-repeat center center fixed;
	-webkit-background-size: cover;
	-moz-background-size: cover;
	-o-background-size: cover;
	background-size: cover;
}

.text-box {

  	margin: 0px auto 60px auto;
	background-color: white;
	padding: 4em;
}


/*
	MEDIA QUERIES
*/

/*
	This is how you make your page be responsive. I've commented it out so it won't confuse you; uncomment
	and play around to find your results. I just put some random things in there.

	Here's how it works:
	1) Make a media query (in the first case, monitors larger than 800px, then 1024px)
	2) place your statements inside that query (you will be repeating classes and elements here,
	basically overriding the other states.)
	3) That's it!

	In my example, this happens:
	- If the browser is larger than 800px, the font will go to 17px
	- If the browser is larger than 1024px, the background image disappears, font is larger and font becomes Helvetica

	Un-comment and play around! :)
*/
/* 
@media screen and (min-width: 800px) {

	body {
		font-size: 17px;
	}

	.content {
		width: 85%;
		margin: 0px;
	}
}

@media screen and (min-width: 1024px) {
	
	body {
		font-size: 18px;
		background-image: none;
	}

	h1 {
		font-family: Helvetica;
	}

}
*/